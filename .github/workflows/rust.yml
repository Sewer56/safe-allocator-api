name: Test, Upload Coverage and Release Rust

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          # Stable
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false, rust-toolchain: stable, features: "" }
          - { os: ubuntu-latest, target: i686-unknown-linux-gnu, use-cross: false, rust-toolchain: stable, features: "" }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, use-cross: true, rust-toolchain: stable, features: "" }
          - { os: ubuntu-latest, target: armv7-unknown-linux-gnueabihf, use-cross: true, rust-toolchain: stable, features: "" }
          - { os: windows-latest, target: x86_64-pc-windows-msvc, use-cross: false, rust-toolchain: stable, features: "" }
          - { os: windows-latest, target: i686-pc-windows-msvc, use-cross: false, rust-toolchain: stable, features: "" }
          - { os: windows-latest, target: aarch64-pc-windows-msvc, use-cross: false, rust-toolchain: stable, features: "" }
          - { os: macos-13, target: x86_64-apple-darwin, use-cross: false, rust-toolchain: stable, features: "" } # x86
          - { os: macos-14, target: aarch64-apple-darwin, use-cross: false, rust-toolchain: stable, features: "" } # M1
          # Nightly
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false, rust-toolchain: nightly, features: "nightly" }
          - { os: ubuntu-latest, target: i686-unknown-linux-gnu, use-cross: false, rust-toolchain: nightly, features: "nightly" }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, use-cross: true, rust-toolchain: nightly, features: "nightly" }
          - { os: ubuntu-latest, target: armv7-unknown-linux-gnueabihf, use-cross: true, rust-toolchain: nightly, features: "nightly" }
          - { os: windows-latest, target: x86_64-pc-windows-msvc, use-cross: false, rust-toolchain: nightly, features: "nightly" }
          - { os: windows-latest, target: i686-pc-windows-msvc, use-cross: false, rust-toolchain: nightly, features: "nightly" }
          - { os: windows-latest, target: aarch64-pc-windows-msvc, use-cross: false, rust-toolchain: nightly, features: "nightly" }
          - { os: macos-13, target: x86_64-apple-darwin, use-cross: false, rust-toolchain: nightly, features: "nightly" } # x86
          - { os: macos-14, target: aarch64-apple-darwin, use-cross: false, rust-toolchain: nightly, features: "nightly" } # M1

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Run Tests and Upload Coverage
        uses: Reloaded-Project/devops-rust-test-and-coverage@v1
        # Currently unsupported due to no native runner.
        # Native runner currently only available in enterprise.
        if: matrix.target != 'aarch64-pc-windows-msvc'
        with:
          upload-coverage: true
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          target: ${{ matrix.target }}
          use-cross: ${{ matrix.use-cross }}
          rust-toolchain: ${{ matrix.rust-toolchain }}
          features: ${{ matrix.features }}

      # Note: The GitHub Runner Images will contain an up to date Rust Stable Toolchain
      #       thus as per recommendation of cargo-semver-checks, we're using stable here.
      #
      # Note to reader. If adding this to a new repo, please clear cache.
      - name: Run cargo-semver-checks
        if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          SEARCH_RESULT=$(cargo search "^safe-allocator-api$" --limit 1)

          if echo "$SEARCH_RESULT" | grep -q "^safe-allocator-api "; then
            rustup +stable target add ${{ matrix.target }}
            cargo +stable install cargo-semver-checks
            cargo +stable semver-checks --target ${{ matrix.target }} 
          else
              echo "No previous version found on crates.io. Skipping semver checks."
          fi

  publish-crate:
    permissions:
      contents: write

    needs: [build-and-test]
    # Publish only on tags
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Publish Rust Crate and Artifacts  
        uses: Reloaded-Project/devops-publish-action@v1
        with:
          crates-io-token: ${{ secrets.CRATES_IO_TOKEN }}
          rust-project-paths: |
            .